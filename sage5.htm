<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SAGE - Sogeti Agent Exchange</title>
    <style>
        :root {
            --primary-color: #0056b3;
            --secondary-color: #6c757d;
            --light-bg: #f8f9fa;
            --dark-bg: #212529;
            --success: #28a745;
            --warning: #ffc107;
            --danger: #dc3545;
            --white: #ffffff;
            --border-color: #dee2e6;
            --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            --sogeti-blue: #00164b;
            --sogeti-light-blue: #e6f0fa;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: var(--light-bg);
            color: #333;
            line-height: 1.6;
        }

        header {
            background-color: var(--sogeti-blue);
            color: var(--white);
            padding: 1rem 2rem;
            box-shadow: var(--box-shadow);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-container {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 1.5rem;
            font-weight: bold;
        }

        .search-bar {
            display: flex;
            background-color: var(--white);
            border-radius: 4px;
            overflow: hidden;
            width: 40%;
            min-width: 300px;
        }

        .search-bar input {
            flex: 1;
            border: none;
            padding: 0.5rem 1rem;
            font-size: 0.9rem;
        }

        .search-bar button {
            background-color: var(--white);
            border: none;
            padding: 0.5rem 1rem;
            cursor: pointer;
            color: var(--secondary-color);
        }

        main {
            max-width: 1200px;
            margin: 0 auto;
            padding: 1rem 2rem;
        }

        .stats-container {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            background-color: var(--white);
            border-radius: 4px;
            padding: 0.75rem;
            margin-bottom: 1rem;
            box-shadow: var(--box-shadow);
        }

        .stat-item {
            display: flex;
            align-items: center;
            padding: 0 0.75rem;
            border-right: 1px solid var(--border-color);
        }

        .stat-item:last-child {
            border-right: none;
        }

        .stat-value {
            font-size: 1.1rem;
            font-weight: bold;
            color: var(--sogeti-blue);
            margin-right: 0.25rem;
        }

        .stat-label {
            color: var(--secondary-color);
            font-size: 0.85rem;
            white-space: nowrap;
        }

        .filter-container {
            background-color: var(--white);
            padding: 1rem;
            border-radius: 4px;
            margin-bottom: 1rem;
            box-shadow: var(--box-shadow);
        }

        .filter-title {
            font-size: 1rem;
            margin-bottom: 0.5rem;
        }

        .filter-options {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .filter-group {
            flex: 1;
            min-width: 180px;
        }

        .filter-group label {
            display: block;
            margin-bottom: 0.3rem;
            font-weight: 600;
            font-size: 0.85rem;
        }

        .filter-group select, .view-toggle button {
            width: 100%;
            padding: 0.4rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            background-color: var(--white);
            font-size: 0.9rem;
        }

        .view-toggle {
            display: flex;
            gap: 0.5rem;
        }

        .view-toggle button {
            flex: 1;
            cursor: pointer;
            background-color: var(--light-bg);
        }

        .view-toggle button.active {
            background-color: var(--sogeti-blue);
            color: var(--white);
        }

        .agents-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
        }

        .agent-card {
            background-color: var(--white);
            border-radius: 8px;
            overflow: hidden;
            box-shadow: var(--box-shadow);
            transition: transform 0.2s ease;
            height: 100%;
            display: flex;
            flex-direction: column;
            cursor: pointer;
        }

        .agent-card:hover {
            transform: translateY(-5px);
        }

        .agent-header {
            padding: 1rem;
            background-color: var(--sogeti-light-blue);
            border-bottom: 1px solid var(--border-color);
        }

        .agent-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .agent-domain {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            background-color: var(--sogeti-blue);
            color: var(--white);
            border-radius: 4px;
            font-size: 0.8rem;
        }
        
        .agent-subdomain {
            display: inline-block;
            padding: 0.2rem 0.4rem;
            background-color: rgba(0, 86, 179, 0.2);
            color: var(--sogeti-blue);
            border-radius: 4px;
            font-size: 0.75rem;
            margin-top: 0.3rem;
        }

        .agent-body {
            padding: 1rem;
            flex: 1;
        }

        .agent-description {
            margin-bottom: 1rem;
            overflow: hidden;
            display: -webkit-box;
            -webkit-line-clamp: 4;
            -webkit-box-orient: vertical;
        }

        .agent-footer {
            padding: 1rem;
            background-color: #fafafa;
            border-top: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .agent-rating {
            display: flex;
            align-items: center;
        }

        .stars {
            color: #ffc107;
            margin-right: 0.5rem;
        }

        .agent-comments {
            color: var(--secondary-color);
            font-size: 0.8rem;
        }

        .list-view .agents-container {
            display: block;
        }

        .list-view .agent-card {
            display: flex;
            flex-direction: row;
            margin-bottom: 1rem;
        }

        .list-view .agent-header {
            width: 25%;
            border-bottom: none;
            border-right: 1px solid var(--border-color);
        }

        .list-view .agent-body {
            width: 55%;
        }

        .list-view .agent-footer {
            width: 20%;
            border-top: none;
            border-left: 1px solid var(--border-color);
        }

        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 1.5rem;
        }

        .pagination button {
            background-color: var(--white);
            border: 1px solid var(--border-color);
            padding: 0.5rem 1rem;
            margin: 0 0.25rem;
            cursor: pointer;
        }

        .pagination button.active {
            background-color: var(--sogeti-blue);
            color: var(--white);
            border-color: var(--sogeti-blue);
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background-color: var(--white);
            border-radius: 8px;
            max-width: 800px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: var(--box-shadow);
        }

        .modal-header {
            padding: 1rem;
            background-color: var(--sogeti-blue);
            color: var(--white);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
        }

        .modal-close {
            background: none;
            border: none;
            color: var(--white);
            font-size: 1.5rem;
            cursor: pointer;
        }

        .modal-body {
            padding: 2rem;
        }

        .modal-domain-container {
            margin-bottom: 1rem;
        }

        .modal-domain {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            background-color: var(--sogeti-blue);
            color: var(--white);
            border-radius: 4px;
            margin-right: 0.5rem;
        }
        
        .modal-subdomain {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            background-color: rgba(0, 86, 179, 0.2);
            color: var(--sogeti-blue);
            border-radius: 4px;
        }

        .modal-description {
            margin-bottom: 2rem;
            line-height: 1.8;
        }

        .modal-section {
            margin-bottom: 2rem;
        }

        .modal-section-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid var(--border-color);
        }

        .comment {
            background-color: var(--light-bg);
            padding: 1rem;
            border-radius: 4px;
            margin-bottom: 1rem;
        }

        .comment-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.5rem;
        }

        .comment-author {
            font-weight: 600;
        }

        .comment-date {
            color: var(--secondary-color);
            font-size: 0.8rem;
        }

        .modal-footer {
            padding: 1rem 2rem;
            background-color: #fafafa;
            border-top: 1px solid var(--border-color);
            text-align: right;
        }

        .contact-btn {
            background-color: var(--sogeti-blue);
            color: var(--white);
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 600;
        }

        .rating-input {
            display: flex;
            flex-direction: row-reverse;
            justify-content: flex-end;
        }

        .rating-input input {
            display: none;
        }

        .rating-input label {
            cursor: pointer;
            color: #ccc;
            font-size: 1.5rem;
            padding: 0 0.1rem;
        }

        .rating-input label:hover,
        .rating-input label:hover ~ label,
        .rating-input input:checked ~ label {
            color: #ffc107;
        }

        .comment-form {
            margin-top: 1rem;
        }

        .comment-form textarea {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            resize: vertical;
            min-height: 100px;
            margin-bottom: 1rem;
        }

        .comment-form button {
            background-color: var(--sogeti-blue);
            color: var(--white);
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 600;
        }

        .no-results {
            text-align: center;
            padding: 2rem;
            font-size: 1.2rem;
            color: var(--secondary-color);
        }

        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 300px;
        }

        .loading-spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            width: 36px;
            height: 36px;
            border-radius: 50%;
            border-left-color: var(--sogeti-blue);
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @media (max-width: 768px) {
            .header-container {
                flex-direction: column;
                gap: 1rem;
            }
            
            .search-bar {
                width: 100%;
            }
            
            .agents-container {
                grid-template-columns: 1fr;
            }
            
            .list-view .agent-card {
                flex-direction: column;
            }
            
            .list-view .agent-header,
            .list-view .agent-body,
            .list-view .agent-footer {
                width: 100%;
                border: none;
            }
            
            .list-view .agent-header {
                border-bottom: 1px solid var(--border-color);
            }
            
            .list-view .agent-footer {
                border-top: 1px solid var(--border-color);
            }

            .stats-container {
                flex-direction: row;
                flex-wrap: wrap;
                justify-content: space-around;
            }
            
            .stat-item {
                border-right: none;
                margin-bottom: 0.5rem;
                flex: 1 0 40%;
                justify-content: center;
            }
        }
    </style>
</head>
<body>
    <header>
        <div class="header-container">
            <div class="logo"> 
                <img   style="margin: 0 0 -0.27em 1em; border: 0; width:12%;" src="sage-logo-020.png" alt="SAGE - Sogeti Agent Exchange" />
                Sogeti Agent Exchange
            </div>
            <div class="search-bar">
                <input type="text" id="search-input" placeholder="Search for agents...">
                <button id="search-button">🔍</button>
            </div>
        </div>
    </header>

    <main>
        <div class="stats-container">
            <div class="stat-item">
                <div class="stat-value" id="total-agents">0</div>
                <div class="stat-label">Agents</div>
            </div>
            <div class="stat-item">
                <div class="stat-value" id="total-domains">0</div>
                <div class="stat-label">Domains</div>
            </div>
            <div class="stat-item">
                <div class="stat-value" id="avg-rating">0.0</div>
                <div class="stat-label">Avg Rating</div>
            </div>
            <div class="stat-item">
                <div class="stat-value" id="total-reviews">0</div>
                <div class="stat-label">Reviews</div>
            </div>
            <div class="stat-item">
                <div class="stat-value" id="capability-count">12</div>
                <div class="stat-label">Capabilities</div>
            </div>
        </div>

        <div class="filter-container">
            <div class="filter-title">Filters</div>
            <div class="filter-options">
                <div class="filter-group">
                    <label for="capability-l1-filter">Business Capability (L1)</label>
                    <select id="capability-l1-filter">
                        <option value="all">All Capabilities</option>
                        <!-- L1 capabilities will be populated by JavaScript -->
                    </select>
                </div>
                <div class="filter-group">
                    <label for="capability-l2-filter">Business Capability (L2)</label>
                    <select id="capability-l2-filter">
                        <option value="all">All Sub-capabilities</option>
                        <!-- L2 capabilities will be populated by JavaScript -->
                    </select>
                </div>
                <div class="filter-group">
                    <label for="trial-filter">Trial Availability</label>
                    <select id="trial-filter">
                        <option value="all">All</option>
                        <option value="trial">Trial</option>
                        <option value="no-trial">No Trial</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label for="rating-filter">Minimum Rating</label>
                    <select id="rating-filter">
                        <option value="0">Any Rating</option>
                        <option value="1">1+ Stars</option>
                        <option value="2">2+ Stars</option>
                        <option value="3">3+ Stars</option>
                        <option value="4">4+ Stars</option>
                        <option value="5">5 Stars</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label for="sort-by">Sort By</label>
                    <select id="sort-by">
                        <option value="name">Name (A-Z)</option>
                        <option value="name-desc">Name (Z-A)</option>
                        <option value="rating-desc">Highest Rated</option>
                        <option value="rating">Lowest Rated</option>
                        <option value="reviews-desc">Most Reviews</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label>View</label>
                    <div class="view-toggle">
                        <button id="grid-view" class="active">Grid</button>
                        <button id="list-view">List</button>
                    </div>
                </div>
            </div>
        </div>

        <div id="loading" class="loading">
            <div class="loading-spinner"></div>
        </div>

        <div class="agents-container" id="agents-container" style="display: none;">
            <!-- Agent cards will be populated by JavaScript -->
        </div>

        <div class="pagination" id="pagination">
            <!-- Pagination will be populated by JavaScript -->
        </div>
    </main>

    <div class="modal" id="agent-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title" id="modal-title">Agent Title</h2>
                <button class="modal-close" id="modal-close">&times;</button>
            </div>
            <div class="modal-body" id="modal-body">
                <!-- Modal content will be populated by JavaScript -->
            </div>
            <div class="modal-footer">
                <button class="contact-btn" id="contact-btn">Contact Developer</button>
            </div>
        </div>
    </div>

    <script>
        // Define business capability levels
        const businessCapabilities = {
            "Development": {
                name: "Development",
                subCapabilities: ["SDLC", "Software Development / DevOps", "Software Engineering / Automated Program Repair", "Software Development / Project Management", "Software Development / Developer Tools"]
            },
            "Data": {
                name: "Data",
                subCapabilities: ["Data Analytics & Business Intelligence", "Data Labeling & Annotation", "Text-to-SQL & Business Intelligence", "Enterprise Knowledge Management"]
            },
            "Testing": {
                name: "Testing",
                subCapabilities: ["Testing", "ERP"]
            },
            "AI": {
                name: "AI",
                subCapabilities: ["Computer Vision / AI-assisted Development", "AI Safety & Security", "AI/LLM Observability & Monitoring", "Synthetic Data Generation"]
            },
            "Healthcare": {
                name: "Healthcare",
                subCapabilities: ["Healthcare", "Healthcare / Health Insurance"]
            },
            "Business Services": {
                name: "Business Services",
                subCapabilities: ["HR", "Legal", "Procurement", "Financial Services", "Property Management", "Retail / Content Marketing"]
            },
            "Customer Engagement": {
                name: "Customer Engagement",
                subCapabilities: ["Customer Service / E-commerce", "Telecommunications", "Sales Experience"]
            },
            "Supply Chain": {
                name: "Supply Chain",
                subCapabilities: ["Demand Forecast (SCM)"]
            },
            "Government": {
                name: "Government",
                subCapabilities: ["Government"]
            },
            "Cross-Domain": {
                name: "Cross-Domain",
                subCapabilities: ["Cross Functional", "Diagramming & Visualization Tools", "Document Compliance & Quality Assurance"]
            }
        };

        // Function to find L1 category for a domain
        function findL1ForDomain(domain) {
            for (const [key, value] of Object.entries(businessCapabilities)) {
                if (value.subCapabilities.includes(domain)) {
                    return key;
                }
            }
            return "Other";
        }

        // Full agent data
        const agentsData = [
            {
                id: 1,
                name: "Requirement, Estimation, Planning",
                description: "An SDLC agentic solution uses Agentic AI to streamline the early phases of software development: Requirement Gathering, Effort Estimation, and Project Planning. These agents collaborate with stakeholders, analyze data, and generate actionable insights to accelerate and improve decision-making",
                domain: "SDLC",
                capabilityL1: "Development",
                capabilityL2: "SDLC",
                rating: 4.5,
                commentCount: 12,
                version: "1.2.0",
                lastUpdated: "2025-05-10",
                trial: true
            },
            {
                id: 2,
                name: "Agentic Procurement and Negotiation",
                description: "The Procurement agent workflow works on assistenting in procurement of materials in a supply chain, this agentic workflow aims at analysing the various suppliers and their performance, quality of produce, commercials to provide the reccomended negotiation strategy and also drafting the contract for the engagement",
                domain: "Procurement",
                capabilityL1: "Business Services",
                capabilityL2: "Procurement",
                rating: 3.8,
                commentCount: 7,
                version: "2.1.0",
                lastUpdated: "2025-04-22",
                trial: false
            },
            {
                id: 3,
                name: "HR Training and Certification Agentic System",
                description: "This agentic flow prepares the personalised training plan for each individual by looking at various information like employee skills, employee time availability, employee location etc and shared the detailed report to HR and employees over email",
                domain: "HR",
                capabilityL1: "Business Services",
                capabilityL2: "HR",
                rating: 4.2,
                commentCount: 15,
                version: "1.0.5",
                lastUpdated: "2025-06-01",
                trial: false
            },
            {
                id: 4,
                name: "HR Recruitment Agentic system",
                description: "The Recruitment agentic workflow aims at assisting a recruiter in their E2E journey, from creating Job descriptions, posting on Job boards, Resume scoring, panel selection and scheduling interviews. The workflow is dynamically upskilled for resume parsing based on any job profile intended to be created",
                domain: "HR",
                capabilityL1: "Business Services",
                capabilityL2: "HR",
                rating: 4.7,
                commentCount: 23,
                version: "2.3.1",
                lastUpdated: "2025-05-15",
                trial: true
            },
            {
                id: 5,
                name: "Workday Flow Tester",
                description: "As new workflows are created, generate automated test cases",
                domain: "Testing",
                capabilityL1: "Testing",
                capabilityL2: "Testing",
                rating: 3.5,
                commentCount: 5,
                version: "1.1.0",
                lastUpdated: "2025-03-20"
            },
            {
                id: 6,
                name: "Policy Comparison",
                description: "A claim comparison agentic solution uses Agentic AI to automate and optimize the process of comparing insurance claims. This is especially valuable in industries like insurance, where accuracy, speed, and compliance are critical. Benefits of this is Dynamic Decision-Making, Enhanced Accuracy and Speed, Compliance and Transparency",
                domain: "Healthcare",
                capabilityL1: "Healthcare",
                capabilityL2: "Healthcare",
                rating: 4.0,
                commentCount: 11,
                version: "1.5.2",
                lastUpdated: "2025-04-05"
            },
            {
                id: 7,
                name: "Claim reimbursement report",
                description: "A claim reimbursement agentic solution uses Agentic AI to automate, compare, and process reimbursement claims in industries like healthcare and insurance. These agents mimic human decision-making and continuously learn from data and feedback.",
                domain: "Healthcare",
                capabilityL1: "Healthcare",
                capabilityL2: "Healthcare",
                rating: 4.3,
                commentCount: 9,
                version: "2.0.1",
                lastUpdated: "2025-05-28"
            },
            {
                id: 8,
                name: "Demand Forecasting",
                description: "A demand forecasting agentic solution leverages Agentic AI to predict future demand, determine optimal stock levels, and conduct supplier analysis by evaluating forecast trends, historical data, and business rules",
                domain: "Demand Forecast (SCM)",
                capabilityL1: "Supply Chain",
                capabilityL2: "Demand Forecast (SCM)",
                rating: 4.1,
                commentCount: 14,
                version: "1.3.0",
                lastUpdated: "2025-04-10"
            },
            {
                id: 9,
                name: "Legal for Corporate",
                description: "Customer Legal agent for state filing research",
                domain: "Legal",
                capabilityL1: "Business Services",
                capabilityL2: "Legal",
                rating: 3.9,
                commentCount: 6,
                version: "1.0.0",
                lastUpdated: "2025-03-15"
            },
            {
                id: 10,
                name: "Document Validation Agents",
                description: "Two step process (2 separate multi agent workflows) to validate a Financial report against a Copy Editing SOP",
                domain: "Cross Functional",
                capabilityL1: "Cross-Domain",
                capabilityL2: "Cross Functional",
                rating: 4.4,
                commentCount: 8,
                version: "1.2.3",
                lastUpdated: "2025-05-01"
            },
            {
                id: 11,
                name: "Travel Planner",
                description: "Travel planning based on realtime data for flight and hotel booking. The Agentic workflow used a research agent to get latest information.",
                domain: "Cross Functional",
                capabilityL1: "Cross-Domain",
                capabilityL2: "Cross Functional",
                rating: 4.8,
                commentCount: 27,
                version: "2.4.0",
                lastUpdated: "2025-06-05"
            },
            {
                id: 12,
                name: "SOP based Document verification (Deep researcher)",
                description: "AI-powered Deep Research Agent generates SOP for editing Healthcare Providers' investor reports, ensuring linguistic accuracy, consistency, and regulatory compliance.",
                domain: "Cross Functional",
                capabilityL1: "Cross-Domain",
                capabilityL2: "Cross Functional",
                rating: 3.7,
                commentCount: 5,
                version: "1.0.2",
                lastUpdated: "2025-04-18"
            },
            {
                id: 13,
                name: "SAP Functional Test Case Generator",
                description: "An SAP Functional Test Case Generator using agentic AI is a solution that automates the creation, execution, and optimization of test cases for SAP systems",
                domain: "ERP",
                capabilityL1: "Testing",
                capabilityL2: "ERP",
                rating: 4.2,
                commentCount: 13,
                version: "1.3.1",
                lastUpdated: "2025-05-12"
            },
            {
                id: 14,
                name: "Deep Research Agent",
                description: "Deep research agent is plug and play agent able to do detailed research with reasoning and negotiation on any topic given. It has the ability to go over websites and get the relevant information for its research.",
                domain: "Cross Functional",
                capabilityL1: "Cross-Domain",
                capabilityL2: "Cross Functional",
                rating: 4.6,
                commentCount: 19,
                version: "2.2.0",
                lastUpdated: "2025-05-20"
            },
            {
                id: 15,
                name: "Data Agent",
                description: "This agent is another plug and play agent which provides information from various tables within a database or from multiple databases",
                domain: "Cross Functional",
                capabilityL1: "Cross-Domain",
                capabilityL2: "Cross Functional",
                rating: 4.0,
                commentCount: 10,
                version: "1.5.0",
                lastUpdated: "2025-04-25"
            },
            {
                id: 16,
                name: "KnowNow - Knowledge Management",
                description: "Chat with private data",
                domain: "Sales Experience",
                capabilityL1: "Customer Engagement",
                capabilityL2: "Sales Experience",
                rating: 4.3,
                commentCount: 8,
                version: "1.0.0",
                lastUpdated: "2025-04-12"
            },
            {
                id: 17,
                name: "Intent Classifier Agent",
                description: "Determine and classify incoming request",
                domain: "Sales Experience",
                capabilityL1: "Customer Engagement",
                capabilityL2: "Sales Experience",
                rating: 3.9,
                commentCount: 6,
                version: "1.1.0",
                lastUpdated: "2025-05-05"
            },
            {
                id: 18,
                name: "File Validity Check Agent",
                description: "Intelligently validate correctness of incoming file",
                domain: "Sales Experience",
                capabilityL1: "Customer Engagement",
                capabilityL2: "Sales Experience",
                rating: 4.2,
                commentCount: 11,
                version: "1.2.1",
                lastUpdated: "2025-04-30"
            },
            {
                id: 19,
                name: "Problem Statement Comprehension Agent",
                description: "Research and articulate a complex problem",
                domain: "Sales Experience",
                capabilityL1: "Customer Engagement",
                capabilityL2: "Sales Experience",
                rating: 4.5,
                commentCount: 15,
                version: "1.3.2",
                lastUpdated: "2025-05-18"
            },
            {
                id: 20,
                name: "CV Maker Agent",
                description: "Create a customized CV",
                domain: "Sales Experience",
                capabilityL1: "Customer Engagement",
                capabilityL2: "Sales Experience",
                rating: 4.7,
                commentCount: 22,
                version: "2.0.0",
                lastUpdated: "2025-06-01"
            },
            {
                id: 21,
                name: "RFP Summariser Agent",
                description: "Summarize and format an RFP into a standardized template",
                domain: "Sales Experience",
                capabilityL1: "Customer Engagement",
                capabilityL2: "Sales Experience",
                rating: 4.1,
                commentCount: 9,
                version: "1.5.0",
                lastUpdated: "2025-05-10"
            },
            {
                id: 22,
                name: "RFP Questionnaire",
                description: "Create a customized RFP questionnaire",
                domain: "Sales Experience",
                capabilityL1: "Customer Engagement",
                capabilityL2: "Sales Experience",
                rating: 3.8,
                commentCount: 7,
                version: "1.0.3",
                lastUpdated: "2025-04-22"
            },
            {
                id: 23,
                name: "Proposal Validator Agent",
                description: "Validate an RFP response",
                domain: "Sales Experience",
                capabilityL1: "Customer Engagement",
                capabilityL2: "Sales Experience",
                rating: 4.0,
                commentCount: 10,
                version: "1.2.0",
                lastUpdated: "2025-05-02"
            },
            {
                id: 24,
                name: "Proposal Maker Agent",
                description: "Create a full proposal",
                domain: "Sales Experience",
                capabilityL1: "Customer Engagement",
                capabilityL2: "Sales Experience",
                rating: 4.6,
                commentCount: 18,
                version: "2.1.0",
                lastUpdated: "2025-05-25"
            },
            {
                id: 25,
                name: "Chunk Summariser Agent",
                description: "Summarises individual chunks of uploaded document to handle larger files",
                domain: "Sales Experience",
                capabilityL1: "Customer Engagement",
                capabilityL2: "Sales Experience",
                rating: 3.9,
                commentCount: 8,
                version: "1.1.2",
                lastUpdated: "2025-04-15"
            },
            {
                id: 26,
                name: "Research Agent",
                description: "Performs research to ground responses",
                domain: "Sales Experience",
                capabilityL1: "Customer Engagement",
                capabilityL2: "Sales Experience",
                rating: 4.4,
                commentCount: 14,
                version: "1.4.0",
                lastUpdated: "2025-05-08"
            },
            {
                id: 27,
                name: "Word File Generator Agent",
                description: "Creates the final proposal word document",
                domain: "Sales Experience",
                capabilityL1: "Customer Engagement",
                capabilityL2: "Sales Experience",
                rating: 4.2,
                commentCount: 12,
                version: "1.3.0",
                lastUpdated: "2025-04-28"
            },
            {
                id: 28,
                name: "Identify Illegal Substances Sold Online",
                description: "Livsmedelsverket, food and drug administration, building fully productionized on open shift on prem. 15-30 min instead of 45-years of work before.",
                domain: "Government",
                capabilityL1: "Government",
                capabilityL2: "Government",
                rating: 4.8,
                commentCount: 25,
                version: "2.0.1",
                lastUpdated: "2025-06-03"
            },
            {
                id: 29,
                name: "Agents Escalation Workflow",
                description: "Customer service escalation system with AI agent handling returns/exchanges/refunds and human approval workflow for complex cases",
                domain: "Customer Service / E-commerce",
                capabilityL1: "Customer Engagement",
                capabilityL2: "Customer Service / E-commerce",
                rating: 4.3,
                commentCount: 16,
                version: "1.5.1",
                lastUpdated: "2025-05-15"
            },
            {
                id: 30,
                name: "AI Customer Support Agents",
                description: "Multi-agent telecommunications customer support system with specialized agents for sales, technical support, billing, and activation",
                domain: "Telecommunications",
                capabilityL1: "Customer Engagement",
                capabilityL2: "Telecommunications",
                rating: 4.5,
                commentCount: 20,
                version: "2.2.0",
                lastUpdated: "2025-05-30"
            },
            {
                id: 31,
                name: "AIDA - AI Insights Data Analysis Assistant",
                description: "AI-powered data analysis and visualization platform with multiple specialized agents for comprehensive data insights",
                domain: "Data Analytics & Business Intelligence",
                capabilityL1: "Data",
                capabilityL2: "Data Analytics & Business Intelligence",
                rating: 4.7,
                commentCount: 22,
                version: "2.3.1",
                lastUpdated: "2025-06-05"
            },
            {
                id: 32,
                name: "Autonomous Data Labeling Agent Framework (Adala)",
                description: "Framework for creating autonomous data processing agents that learn and improve skills iteratively through environment feedback",
                domain: "Data Labeling & Annotation",
                capabilityL1: "Data",
                capabilityL2: "Data Labeling & Annotation",
                rating: 4.1,
                commentCount: 13,
                version: "1.4.2",
                lastUpdated: "2025-05-12"
            },
            {
                id: 33,
                name: "Open Data QnA - Text-to-SQL Workflow",
                description: "Text-to-SQL and data interaction system that processes natural language questions to retrieve data from SQL databases",
                domain: "Data Analytics & Business Intelligence",
                capabilityL1: "Data",
                capabilityL2: "Data Analytics & Business Intelligence",
                rating: 4.4,
                commentCount: 17,
                version: "1.6.0",
                lastUpdated: "2025-05-20"
            },
            {
                id: 34,
                name: "Vanna - AI-Powered SQL Generation",
                description: "RAG framework for generating SQL queries from natural language with training on database schema and documentation",
                domain: "Text-to-SQL & Business Intelligence",
                capabilityL1: "Data",
                capabilityL2: "Text-to-SQL & Business Intelligence",
                rating: 4.6,
                commentCount: 19,
                version: "2.0.1",
                lastUpdated: "2025-05-28"
            },
            {
                id: 35,
                name: "MedAuth - Automated Prior Authorization",
                description: "AI system for automating prior authorization decisions in healthcare with comprehensive evaluation pipeline",
                domain: "Healthcare / Health Insurance",
                capabilityL1: "Healthcare",
                capabilityL2: "Healthcare / Health Insurance",
                rating: 4.2,
                commentCount: 14,
                version: "1.5.2",
                lastUpdated: "2025-05-10"
            },
            {
                id: 36,
                name: "Potpie AI Agent Platform",
                description: "Developer platform that builds knowledge graphs from code repositories and deploys specialized AI agents for software development tasks",
                domain: "Software Development / Developer Tools",
                capabilityL1: "Development",
                capabilityL2: "Software Development / Developer Tools",
                rating: 4.5,
                commentCount: 18,
                version: "2.1.0",
                lastUpdated: "2025-05-25"
            },
            {
                id: 37,
                name: "Creative Writer Agent",
                description: "Content creation system for outdoor retailer with multiple agents collaborating to create blog articles with product integration",
                domain: "Retail / Content Marketing",
                capabilityL1: "Business Services",
                capabilityL2: "Retail / Content Marketing",
                rating: 4.3,
                commentCount: 15,
                version: "1.4.1",
                lastUpdated: "2025-05-15"
            },
            {
                id: 38,
                name: "Diagram Generator Tool",
                description: "Next.js application that converts natural language descriptions into Mermaid diagram syntax using AI",
                domain: "Diagramming & Visualization Tools",
                capabilityL1: "Cross-Domain",
                capabilityL2: "Diagramming & Visualization Tools",
                rating: 4.0,
                commentCount: 12,
                version: "1.3.0",
                lastUpdated: "2025-05-05"
            },
            {
                id: 39,
                name: "RedTeaming Framework",
                description: "Automated red teaming system for AI agents to identify vulnerabilities, biases, and potential misuses",
                domain: "AI Safety & Security",
                capabilityL1: "AI",
                capabilityL2: "AI Safety & Security",
                rating: 4.4,
                commentCount: 16,
                version: "1.7.0",
                lastUpdated: "2025-05-18"
            },
            {
                id: 40,
                name: "Agentic Tracing Framework",
                description: "Comprehensive observability framework for AI agent systems with deep monitoring and analysis capabilities",
                domain: "AI/LLM Observability & Monitoring",
                capabilityL1: "AI",
                capabilityL2: "AI/LLM Observability & Monitoring",
                rating: 4.2,
                commentCount: 13,
                version: "1.5.1",
                lastUpdated: "2025-05-12"
            },
            {
                id: 41,
                name: "Synthetic Data Generation Framework",
                description: "Framework for generating synthetic data including Q&A pairs and examples using various LLM providers",
                domain: "Synthetic Data Generation",
                capabilityL1: "AI",
                capabilityL2: "Synthetic Data Generation",
                rating: 4.1,
                commentCount: 11,
                version: "1.3.2",
                lastUpdated: "2025-05-08"
            },
            {
                id: 42,
                name: "PR-Agent",
                description: "AI-powered tool for automating pull request review and management with multiple specialized tools",
                domain: "Software Development / DevOps",
                capabilityL1: "Development",
                capabilityL2: "Software Development / DevOps",
                rating: 4.6,
                commentCount: 20,
                version: "2.2.1",
                lastUpdated: "2025-05-30"
            },
            {
                id: 43,
                name: "SWE-agent",
                description: "AI system for automating software engineering tasks like bug fixing and feature implementation",
                domain: "Software Engineering / Automated Program Repair",
                capabilityL1: "Development",
                capabilityL2: "Software Engineering / Automated Program Repair",
                rating: 4.5,
                commentCount: 19,
                version: "2.0.2",
                lastUpdated: "2025-05-25"
            },
            {
                id: 44,
                name: "VisionAgent",
                description: "AI system for solving computer vision tasks by generating Python code with planning and coding agents",
                domain: "Computer Vision / AI-assisted Development",
                capabilityL1: "AI",
                capabilityL2: "Computer Vision / AI-assisted Development",
                rating: 4.3,
                commentCount: 15,
                version: "1.6.1",
                lastUpdated: "2025-05-15"
            },
            {
                id: 45,
                name: "Enterprise RAG Agentic Orchestrator",
                description: "Sophisticated RAG system with multiple agent strategies for different query types and data sources",
                domain: "Enterprise Knowledge Management",
                capabilityL1: "Data",
                capabilityL2: "Enterprise Knowledge Management",
                rating: 4.7,
                commentCount: 21,
                version: "2.3.0",
                lastUpdated: "2025-06-01"
            },
            {
                id: 46,
                name: "AI Document Review Assistant",
                description: "Document compliance and quality assurance system with specialized review agents for different aspects",
                domain: "Document Compliance & Quality Assurance",
                capabilityL1: "Cross-Domain",
                capabilityL2: "Document Compliance & Quality Assurance",
                rating: 4.2,
                commentCount: 14,
                version: "1.5.0",
                lastUpdated: "2025-05-10"
            },
            {
                id: 47,
                name: "AI Documentation Generation & Azure DevOps Deployment",
                description: "Multi-stage documentation creation system with Azure DevOps integration for project management",
                domain: "Software Development / Project Management",
                capabilityL1: "Development",
                capabilityL2: "Software Development / Project Management",
                rating: 4.4,
                commentCount: 17,
                version: "1.8.0",
                lastUpdated: "2025-05-20"
            },
            {
                id: 48,
                name: "Am I Covered?",
                description: "Agent assist for contact centers for proactive knowledge attainment on policy holders based on their current and questions to be used alongside live contact center agents",
                domain: "Healthcare",
                capabilityL1: "Healthcare",
                capabilityL2: "Healthcare",
                rating: 4.0,
                commentCount: 10,
                version: "1.2.1",
                lastUpdated: "2025-04-30"
            },
            {
                id: 49,
                name: "AI Detective",
                description: "Scours the internet to find HOA Board members for a particular property, get any public facing contact information, and put into CRM",
                domain: "Property Management",
                capabilityL1: "Business Services",
                capabilityL2: "Property Management",
                rating: 3.9,
                commentCount: 8,
                version: "1.1.0",
                lastUpdated: "2025-04-25"
            },
            {
                id: 50,
                name: "Compliant Solutions Alert Agent",
                description: "Find publicly available laws, bills, or topics pertaining to financial or banking institutions, integrate into their customer alert CMS for review by internal teams before sending alerts to credit union clients",
                domain: "Financial Services",
                capabilityL1: "Business Services",
                capabilityL2: "Financial Services",
                rating: 4.3,
                commentCount: 15,
                version: "1.6.2",
                lastUpdated: "2025-05-15"
            },
            {
                id: 51,
                name: "Product Owner Agent",
                description: "Ingests and prioritizes initiatives, requirements and curates business priorities",
                domain: "SDLC",
                capabilityL1: "Development",
                capabilityL2: "SDLC",
                rating: 4.5,
                commentCount: 18,
                version: "2.0.0",
                lastUpdated: "2025-05-25"
            },
            {
                id: 52,
                name: "Business Analyst Agent",
                description: "Ingests and documents business requirements, transforms into traceable user stories",
                domain: "SDLC",
                capabilityL1: "Development",
                capabilityL2: "SDLC",
                rating: 4.4,
                commentCount: 16,
                version: "1.8.1",
                lastUpdated: "2025-05-20"
            },
            {
                id: 53,
                name: "Quality Assurance Strategist",
                description: "Creates test strategies for platforms, apps and systems using requirements from BA agent and other stakeholders",
                domain: "SDLC",
                capabilityL1: "Development",
                capabilityL2: "SDLC",
                rating: 4.2,
                commentCount: 14,
                version: "1.5.0",
                lastUpdated: "2025-05-10"
            },
            {
                id: 54,
                name: "Deployment Engineer",
                description: "Creates, executes, monitors and improves pipelines",
                domain: "SDLC",
                capabilityL1: "Development",
                capabilityL2: "SDLC",
                rating: 4.3,
                commentCount: 15,
                version: "1.7.0",
                lastUpdated: "2025-05-15"
            },
            {
                id: 55,
                name: "Quality Engineer",
                description: "Creates, executes, documents and audits tests",
                domain: "SDLC",
                capabilityL1: "Development",
                capabilityL2: "SDLC",
                rating: 4.1,
                commentCount: 13,
                version: "1.4.1",
                lastUpdated: "2025-05-05"
            },
            {
                id: 56,
                name: "Traceability Analyst",
                description: "Assures traceability of requirements to tests",
                domain: "SDLC",
                capabilityL1: "Development",
                capabilityL2: "SDLC",
                rating: 4.0,
                commentCount: 11,
                version: "1.3.0",
                lastUpdated: "2025-04-30"
            },
            {
                id: 57,
                name: "FinOps Agent",
                description: "Cost and usage reporting, handle cost centers, project tagging, forecasting, wasted cost recommended (WAF, failed jobs), etc.",
                domain: "SDLC",
                capabilityL1: "Development",
                capabilityL2: "SDLC",
                rating: 4.4,
                commentCount: 17,
                version: "1.9.0",
                lastUpdated: "2025-05-22"
            },
            {
                id: 58,
                name: "SRE Agent",
                description: "Monitor data pipelines for errors, retrieve Cloudwatch, etc. logs, generate recommendations on root-cause analysis and auto-remediation, etc.",
                domain: "SDLC",
                capabilityL1: "Development",
                capabilityL2: "SDLC",
                rating: 4.6,
                commentCount: 19,
                version: "2.1.1",
                lastUpdated: "2025-05-28"
            },
            {
                id: 59,
                name: "Data Quality Agent",
                description: "Monitor data movement jobs between data lake zones to ensure integrity, automatically reconcile workloads in multiple environments",
                domain: "SDLC",
                capabilityL1: "Development",
                capabilityL2: "SDLC",
                rating: 4.3,
                commentCount: 15,
                version: "1.6.0",
                lastUpdated: "2025-05-12"
            }
        ];

        // Sample comments for modal view
        const commentTemplates = [
            {
                author: "Jane Smith",
                text: "Absolutely amazing agent! Saved us countless hours of manual work and provided accurate results."
            },
            {
                author: "John Doe",
                text: "Very useful tool that integrates well with our existing workflows. Could use some improvements in handling edge cases."
            },
            {
                author: "Sarah Williams",
                text: "Great functionality and easy to implement. Looking forward to future updates."
            },
            {
                author: "Michael Chen",
                text: "This agent has completely transformed our process. Highly recommended for anyone in this domain."
            },
            {
                author: "Emily Johnson",
                text: "Works well for most cases, but struggles with complex scenarios. Still a valuable addition to our toolkit."
            },
            {
                author: "David Garcia",
                text: "The integration was seamless and the results exceed our expectations. A game-changer for our team."
            },
            {
                author: "Lisa Patel",
                text: "Documentation could be better, but once you understand how to use it, this agent is incredibly powerful."
            },
            {
                author: "Robert Kim",
                text: "Regular updates keep improving the functionality. The developer team is responsive to feedback."
            },
            {
                author: "Sophia Martinez",
                text: "Impressed with the accuracy and speed. Has become an essential part of our workflow."
            },
            {
                author: "James Wilson",
                text: "Great value for the capabilities it provides. Would like to see more customization options in future versions."
            }
        ];

        // Generate sample comments for each agent
        function generateCommentsForAgent(agent) {
            const comments = [];
            const numComments = Math.min(agent.commentCount, 5); // Limit to 5 displayed comments
            
            for (let i = 0; i < numComments; i++) {
                const templateIndex = Math.floor(Math.random() * commentTemplates.length);
                const template = commentTemplates[templateIndex];
                
                // Generate a date within the last 90 days
                const daysAgo = Math.floor(Math.random() * 90);
                const commentDate = new Date();
                commentDate.setDate(commentDate.getDate() - daysAgo);
                
                // Generate a random rating that's somewhat related to the agent's overall rating
                // Slightly randomize around the agent's rating
                let rating = agent.rating + (Math.random() * 2 - 1);
                rating = Math.max(1, Math.min(5, Math.round(rating * 2) / 2)); // Keep between 1-5, with 0.5 increments
                
                comments.push({
                    author: template.author,
                    date: commentDate.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }),
                    rating: rating,
                    text: template.text
                });
            }
            
            // Sort by date (newest first)
            comments.sort((a, b) => new Date(b.date) - new Date(a.date));
            
            return comments;
        }

        // Variables
        let currentPage = 1;
        const itemsPerPage = 12;
        let filteredAgents = [...agentsData];
        let currentView = 'grid';
        let agentComments = {}; // Store generated comments

        // DOM Elements
        const agentsContainer = document.getElementById('agents-container');
        const loadingElement = document.getElementById('loading');
        const paginationContainer = document.getElementById('pagination');
        const searchInput = document.getElementById('search-input');
        const searchButton = document.getElementById('search-button');
        const capabilityL1Filter = document.getElementById('capability-l1-filter');
        // Replace L2 filter with trial filter
        const trialFilter = document.getElementById('trial-filter');
        const ratingFilter = document.getElementById('rating-filter');
        const sortBy = document.getElementById('sort-by');
        const gridViewBtn = document.getElementById('grid-view');
        const listViewBtn = document.getElementById('list-view');
        const modal = document.getElementById('agent-modal');
        const modalClose = document.getElementById('modal-close');
        const modalTitle = document.getElementById('modal-title');
        const modalBody = document.getElementById('modal-body');
        const contactBtn = document.getElementById('contact-btn');
        const totalAgentsElement = document.getElementById('total-agents');
        const totalDomainsElement = document.getElementById('total-domains');
        const avgRatingElement = document.getElementById('avg-rating');
        const totalReviewsElement = document.getElementById('total-reviews');
        const capabilityCountElement = document.getElementById('capability-count');

        // Initialize the page
        function init() {
            // Generate comments for all agents
            agentsData.forEach(agent => {
                agentComments[agent.id] = generateCommentsForAgent(agent);
            });

            // Update stats
            updateStats();
            
            // Populate filters
            populateCapabilityFilters();
            
            // Simulate loading
            setTimeout(() => {
                loadingElement.style.display = 'none';
                agentsContainer.style.display = 'grid';
                applyFilters();
            }, 1000);
            
            setupEventListeners();
        }

        // Update marketplace stats
        function updateStats() {
            // Calculate total agents
            totalAgentsElement.textContent = agentsData.length;
            
            // Calculate unique domains
            const uniqueDomains = new Set(agentsData.map(agent => agent.domain));
            totalDomainsElement.textContent = uniqueDomains.size;
            
            // Calculate average rating
            const totalRating = agentsData.reduce((sum, agent) => sum + agent.rating, 0);
            const avgRating = totalRating / agentsData.length;
            avgRatingElement.textContent = avgRating.toFixed(1);
            
            // Calculate total reviews
            const totalReviews = agentsData.reduce((sum, agent) => sum + agent.commentCount, 0);
            totalReviewsElement.textContent = totalReviews;
            
            // Number of L1 capabilities
            capabilityCountElement.textContent = Object.keys(businessCapabilities).length;
        }

        // Populate capability filter dropdowns
        function populateCapabilityFilters() {
            // Populate L1 capability filter
            const l1Capabilities = Object.keys(businessCapabilities);
            l1Capabilities.sort();
            l1Capabilities.forEach(capability => {
                const option = document.createElement('option');
                option.value = capability;
                option.textContent = capability;
                capabilityL1Filter.appendChild(option);
            });

            // Populate L2 capability filter
            updateL2CapabilityFilter();
            capabilityL1Filter.addEventListener('change', updateL2CapabilityFilter);

            // Populate trial filter
            if (trialFilter) {
                trialFilter.innerHTML = '';
                const allOpt = document.createElement('option');
                allOpt.value = 'all';
                allOpt.textContent = 'All';
                trialFilter.appendChild(allOpt);
                const trialOpt = document.createElement('option');
                trialOpt.value = 'trial';
                trialOpt.textContent = 'Trial';
                trialFilter.appendChild(trialOpt);
                const noTrialOpt = document.createElement('option');
                noTrialOpt.value = 'no-trial';
                noTrialOpt.textContent = 'No Trial';
                trialFilter.appendChild(noTrialOpt);
            }
        }

        // Update L2 capability filter based on selected L1
        function updateL2CapabilityFilter() {
            const selectedL1 = capabilityL1Filter.value;
            const capabilityL2Filter = document.getElementById('capability-l2-filter');
            capabilityL2Filter.innerHTML = '<option value="all">All Sub-capabilities</option>';

            if (selectedL1 === 'all') {
                // Get all L2 capabilities across all L1s
                const allL2Capabilities = [];
                for (const l1 in businessCapabilities) {
                    businessCapabilities[l1].subCapabilities.forEach(l2 => {
                        allL2Capabilities.push(l2);
                    });
                }
                // Sort and deduplicate
                const uniqueL2Capabilities = [...new Set(allL2Capabilities)].sort();
                uniqueL2Capabilities.forEach(capability => {
                    const option = document.createElement('option');
                    option.value = capability;
                    option.textContent = capability;
                    capabilityL2Filter.appendChild(option);
                });
            } else {
                // Get only L2 capabilities for the selected L1
                const l2Capabilities = businessCapabilities[selectedL1].subCapabilities;
                l2Capabilities.sort();
                l2Capabilities.forEach(capability => {
                    const option = document.createElement('option');
                    option.value = capability;
                    option.textContent = capability;
                    capabilityL2Filter.appendChild(option);
                });
            }
        }

        // Apply filters and sorting to the agents data
        function applyFilters() {
            const searchTerm = searchInput.value.toLowerCase();
            const l1Value = capabilityL1Filter.value;
            const capabilityL2Filter = document.getElementById('capability-l2-filter');
            const l2Value = capabilityL2Filter ? capabilityL2Filter.value : 'all';
            const trialValue = trialFilter ? trialFilter.value : 'all';
            const ratingValue = parseFloat(ratingFilter.value);
            const sortValue = sortBy.value;

            // Filter by search term
            filteredAgents = agentsData.filter(agent => {
                return agent.name.toLowerCase().includes(searchTerm) || 
                       agent.description.toLowerCase().includes(searchTerm) ||
                       agent.domain.toLowerCase().includes(searchTerm) ||
                       agent.capabilityL1.toLowerCase().includes(searchTerm) ||
                       agent.capabilityL2.toLowerCase().includes(searchTerm);
            });

            // Filter by L1 capability
            if (l1Value !== 'all') {
                filteredAgents = filteredAgents.filter(agent => agent.capabilityL1 === l1Value);
            }

            // Filter by L2 capability
            if (l2Value !== 'all') {
                filteredAgents = filteredAgents.filter(agent => agent.capabilityL2 === l2Value);
            }

            // Filter by trial
            if (trialValue === 'trial') {
                filteredAgents = filteredAgents.filter(agent => agent.trial === true);
            } else if (trialValue === 'no-trial') {
                filteredAgents = filteredAgents.filter(agent => agent.trial === false);
            }

            // Filter by rating
            if (ratingValue > 0) {
                filteredAgents = filteredAgents.filter(agent => agent.rating >= ratingValue);
            }

            // Sort agents
            switch (sortValue) {
                case 'name':
                    filteredAgents.sort((a, b) => a.name.localeCompare(b.name));
                    break;
                case 'name-desc':
                    filteredAgents.sort((a, b) => b.name.localeCompare(a.name));
                    break;
                case 'rating-desc':
                    filteredAgents.sort((a, b) => b.rating - a.rating);
                    break;
                case 'rating':
                    filteredAgents.sort((a, b) => a.rating - b.rating);
                    break;
                case 'reviews-desc':
                    filteredAgents.sort((a, b) => b.commentCount - a.commentCount);
                    break;
            }

            // Reset to first page when filters change
            currentPage = 1;
            
            // Render the filtered agents
            renderAgents();
            renderPagination();
        }

        // Render agent cards to the container
        function renderAgents() {
            agentsContainer.innerHTML = '';

            // Calculate pagination
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const paginatedAgents = filteredAgents.slice(startIndex, endIndex);

            if (paginatedAgents.length === 0) {
                agentsContainer.innerHTML = '<div class="no-results">No agents found matching your criteria.</div>';
                return;
            }

            paginatedAgents.forEach(agent => {
                const agentCard = document.createElement('div');
                agentCard.className = 'agent-card';
                agentCard.dataset.id = agent.id;

                // Generate star rating HTML
                const starRating = generateStarRating(agent.rating);

                // Trial tag
                const trialLabel = agent.trial ? 'Trial' : 'No Trial';
                const trialClass = agent.trial ? 'trial-label trial-yes' : 'trial-label trial-no';

                agentCard.innerHTML = `
                    <div class="agent-header">
                        <h3 class="agent-title">${agent.name}</h3>
                        <span class="agent-domain">${agent.capabilityL1}</span>
                        <span class="agent-subdomain">${agent.capabilityL2}</span>
                        <span class="${trialClass}">${trialLabel}</span>
                    </div>
                    <div class="agent-body">
                        <p class="agent-description">${agent.description}</p>
                    </div>
                    <div class="agent-footer">
                        <div class="agent-rating">
                            <span class="stars">${starRating}</span>
                            <span>${agent.rating.toFixed(1)}</span>
                        </div>
                        <div class="agent-comments">${agent.commentCount} reviews</div>
                    </div>
                `;

                agentsContainer.appendChild(agentCard);
            });
        }

        // Generate HTML for star rating display
        function generateStarRating(rating) {
            const fullStars = Math.floor(rating);
            const hasHalfStar = rating % 1 >= 0.5;
            let starsHTML = '';

            for (let i = 0; i < fullStars; i++) {
                starsHTML += '★';
            }

            if (hasHalfStar) {
                starsHTML += '☆';
            }

            return starsHTML;
        }

        // Render pagination controls
        function renderPagination() {
            paginationContainer.innerHTML = '';
            
            const totalPages = Math.ceil(filteredAgents.length / itemsPerPage);
            
            if (totalPages <= 1) {
                return;
            }

            // Previous button
            const prevButton = document.createElement('button');
            prevButton.textContent = '←';
            prevButton.disabled = currentPage === 1;
            prevButton.addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    renderAgents();
                    renderPagination();
                }
            });
            paginationContainer.appendChild(prevButton);

            // Page buttons
            const maxVisiblePages = 5;
            let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
            let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

            if (endPage - startPage + 1 < maxVisiblePages) {
                startPage = Math.max(1, endPage - maxVisiblePages + 1);
            }

            for (let i = startPage; i <= endPage; i++) {
                const pageButton = document.createElement('button');
                pageButton.textContent = i;
                pageButton.className = i === currentPage ? 'active' : '';
                pageButton.addEventListener('click', () => {
                    currentPage = i;
                    renderAgents();
                    renderPagination();
                });
                paginationContainer.appendChild(pageButton);
            }

            // Next button
            const nextButton = document.createElement('button');
            nextButton.textContent = '→';
            nextButton.disabled = currentPage === totalPages;
            nextButton.addEventListener('click', () => {
                if (currentPage < totalPages) {
                    currentPage++;
                    renderAgents();
                    renderPagination();
                }
            });
            paginationContainer.appendChild(nextButton);
        }

        // Open agent detail modal
        function openAgentModal(agentId) {
            const agent = agentsData.find(a => a.id === parseInt(agentId));
            if (!agent) return;

            modalTitle.textContent = agent.name;
            
            // Generate star rating HTML
            const starRating = generateStarRating(agent.rating);
            
            // Get comments for this agent
            const comments = agentComments[agent.id];

            modalBody.innerHTML = `
                <div class="modal-domain-container">
                    <span class="modal-domain">${agent.capabilityL1}</span>
                    <span class="modal-subdomain">${agent.capabilityL2}</span>
                </div>
                <div class="modal-rating">
                    <span class="stars">${starRating}</span>
                    <span>${agent.rating.toFixed(1)} (${agent.commentCount} reviews)</span>
                </div>
                <div class="modal-description">
                    ${agent.description}
                </div>
                <div class="modal-section">
                    <h3 class="modal-section-title">Version Information</h3>
                    <p><strong>Current Version:</strong> ${agent.version}</p>
                    <p><strong>Last Updated:</strong> ${agent.lastUpdated}</p>
                </div>
                <div class="modal-section">
                    <h3 class="modal-section-title">Reviews</h3>
                    <div class="comments-container">
                        ${comments.map(comment => `
                            <div class="comment">
                                <div class="comment-header">
                                    <span class="comment-author">${comment.author}</span>
                                    <span class="comment-date">${comment.date}</span>
                                </div>
                                <div class="comment-rating">
                                    <span class="stars">${generateStarRating(comment.rating)}</span>
                                </div>
                                <p class="comment-text">${comment.text}</p>
                            </div>
                        `).join('')}
                    </div>
                </div>
                <div class="modal-section">
                    <h3 class="modal-section-title">Add Your Review</h3>
                    <form class="comment-form" id="comment-form">
                        <div class="rating-input">
                            <input type="radio" name="rating" id="star5" value="5">
                            <label for="star5">★</label>
                            <input type="radio" name="rating" id="star4" value="4">
                            <label for="star4">★</label>
                            <input type="radio" name="rating" id="star3" value="3">
                            <label for="star3">★</label>
                            <input type="radio" name="rating" id="star2" value="2">
                            <label for="star2">★</label>
                            <input type="radio" name="rating" id="star1" value="1">
                            <label for="star1">★</label>
                        </div>
                        <textarea placeholder="Write your review here..." required></textarea>
                        <button type="submit">Submit Review</button>
                    </form>
                </div>
            `;

            // Add event listener for comment form
            const commentForm = document.getElementById('comment-form');
            commentForm.addEventListener('submit', (e) => {
                e.preventDefault();
                
                // Get form values
                const ratingInput = document.querySelector('input[name="rating"]:checked');
                const commentText = commentForm.querySelector('textarea').value;
                
                if (!ratingInput || !commentText.trim()) {
                    alert('Please provide both a rating and comment.');
                    return;
                }
                
                const rating = parseFloat(ratingInput.value);
                
                // Add the new comment
                const newComment = {
                    author: "You",
                    date: new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }),
                    rating: rating,
                    text: commentText
                };
                
                agentComments[agent.id].unshift(newComment);
                
                // Update agent rating
                const newTotalRating = (agent.rating * agent.commentCount + rating) / (agent.commentCount + 1);
                agent.rating = Math.round(newTotalRating * 10) / 10; // Round to 1 decimal place
                agent.commentCount += 1;
                
                // Refresh the modal
                openAgentModal(agentId);
                
                // Also refresh the main view if this agent is visible
                renderAgents();
                
                // Update stats
                updateStats();
            });

            modal.style.display = 'flex';
            document.body.style.overflow = 'hidden';
        }

        // Close agent detail modal
        function closeAgentModal() {
            modal.style.display = 'none';
            document.body.style.overflow = 'auto';
        }

        // Toggle between grid and list views
        function toggleView(viewType) {
            currentView = viewType;
            
            if (viewType === 'grid') {
                agentsContainer.classList.remove('list-view');
                gridViewBtn.classList.add('active');
                listViewBtn.classList.remove('active');
            } else {
                agentsContainer.classList.add('list-view');
                listViewBtn.classList.add('active');
                gridViewBtn.classList.remove('active');
            }
        }

        // Set up event listeners
        function setupEventListeners() {
            // Search
            searchButton.addEventListener('click', applyFilters);
            searchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    applyFilters();
                }
            });

            // Filters
            capabilityL1Filter.addEventListener('change', applyFilters);
            const capabilityL2FilterEl = document.getElementById('capability-l2-filter');
            if (capabilityL2FilterEl) capabilityL2FilterEl.addEventListener('change', applyFilters);
            if (trialFilter) trialFilter.addEventListener('change', applyFilters);
            ratingFilter.addEventListener('change', applyFilters);
            sortBy.addEventListener('change', applyFilters);

            // View toggle
            gridViewBtn.addEventListener('click', () => toggleView('grid'));
            listViewBtn.addEventListener('click', () => toggleView('list'));

            // Agent card click to open modal
            agentsContainer.addEventListener('click', (e) => {
                const agentCard = e.target.closest('.agent-card');
                if (agentCard) {
                    openAgentModal(agentCard.dataset.id);
                }
            });

            // Modal close
            modalClose.addEventListener('click', closeAgentModal);
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    closeAgentModal();
                }
            });

            // Contact button
            contactBtn.addEventListener('click', () => {
                alert('Contact form is not implemented in this demo. In a production version, this would open a form to contact the agent developer.');
            });
        }

        // Add styles for trial label
        const style = document.createElement('style');
        style.textContent = `
            .trial-label {
                display: inline-block;
                margin-left: 8px;
                padding: 2px 10px;
                border-radius: 12px;
                font-size: 0.85em;
                font-weight: bold;
                color: #fff;
                vertical-align: middle;
            }
            .trial-yes {
                background-color: #2ecc40;
            }
            .trial-no {
                background-color: #e74c3c;
            }
        `;
        document.head.appendChild(style);

        // Initialize the page on load
        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>